<?php

namespace Vostre\LocalBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * BairroRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BairroRepository extends EntityRepository
{
    
    public function listarTodosREST($limite = null, $dataUltimoAcesso){
        
//        $subqueryEmpresa = $this->createQueryBuilder('l1')
//                ->select('IDENTITY(e.bairro)')
//                ->from("CircularSiteBundle:Empresa", 'e')
//                ->where('e.status = 0')
//                ->getDQL();
//        
//        $subqueryParada = $this->createQueryBuilder('l2')
//                ->select('IDENTITY(p.bairro)')
//                ->from("CircularSiteBundle:Parada", 'p')
//                ->where('p.status = 0')
//                ->getDQL();
//        
//        $subqueryItinerarioPartida = $this->createQueryBuilder('l3')
//                ->select('IDENTITY(i.partida)')
//                ->from("CircularSiteBundle:Itinerario", 'i')
//                ->where('i.status = 0')
//                ->getDQL();
//        
//        $subqueryItinerarioDestino = $this->createQueryBuilder('l4')
//                ->select('IDENTITY(i2.destino)')
//                ->from("CircularSiteBundle:Itinerario", 'i2')
//                ->where('i2.status = 0')
//                ->getDQL();
        
        $qb = $this->createQueryBuilder('b')
                ->select('b.id, b.nome, b.status, l.id AS local, b.slug')
                ->distinct()
                ->leftJoin("VostreLocalBundle:Local", "l", "WITH", "l.id = b.local")
//                ->where($this->createQueryBuilder('e2')->expr()->in('b.id', $subqueryEmpresa))
//                ->orWhere($this->createQueryBuilder('e3')->expr()->in('b.id', $subqueryParada))
//                ->orWhere($this->createQueryBuilder('e4')->expr()->in('b.id', $subqueryItinerarioPartida))
//                ->orWhere($this->createQueryBuilder('e5')->expr()->in('b.id', $subqueryItinerarioDestino))
                ->andWhere("b.ultimaAlteracao > :ultimaAlteracao")
                ->setParameter('ultimaAlteracao', $dataUltimoAcesso)
                ->addOrderBy('b.id');
        
        if(false == is_null($limite)){
            $qb->setMaxResults($limite);
        }
        
        return $qb->getQuery()->getResult();
        
    }
    
    public function listarTodosVinculadosPorLocal($local){
        
        $subqueryItinerarioPartida = $this->createQueryBuilder('l3')
                ->select('IDENTITY(i.partida)')
                ->from("CircularSiteBundle:Itinerario", 'i')
                ->where('i.status = 0')
                ->getDQL();
        
        $qb = $this->createQueryBuilder('b')
                //->select('b.id, b.nome, b.status, l.id AS local')
                ->select('b')
                ->distinct()
                ->innerJoin("VostreLocalBundle:Local", "l", "WITH", "l.id = b.local")
                ->where($this->createQueryBuilder('e2')->expr()->in('b.id', $subqueryItinerarioPartida))
                ->andWhere("l.id = :local")
                ->setParameter('local', $local)
                ->addOrderBy('b.nome, l.nome');
        
        return $qb->getQuery()->getResult();
        
    }
    
    public function carregar($uf, $local, $slug){
        $qb = $this->createQueryBuilder('b')
                ->select('b')
                //->select('p')
                ->distinct()
                ->innerJoin("VostreLocalBundle:Local", "l", "WITH", "l.id = b.local")
                ->innerJoin("VostreLocalBundle:Estado", "e", "WITH", "e.id = l.estado")
                ->andWhere('b.slug = :slug')
                ->andWhere('l.slug = :local')
                ->andWhere('e.sigla = :uf')
                ->setParameter(':slug', $slug)
                ->setParameter(':local', $local)
                ->setParameter(':uf', $uf)
                ->addOrderBy('l.nome');
        
        return $qb->getQuery()->getOneOrNullResult();
        
    }
    
    public function listarRegistrosAtivosVinculados(){
        $qb = $this->createQueryBuilder('b')
                ->select('COUNT(DISTINCT b.id) AS total')
                //->select('p')
//                ->distinct()
                ->innerJoin("CircularSiteBundle:Parada", "p", "WITH", "p.bairro = b.id")
                ->innerJoin("CircularSiteBundle:ParadaItinerario", "pit", "WITH", "pit.parada = p.id")
                ->innerJoin("CircularSiteBundle:HorarioItinerario", "hi", "WITH", "hi.itinerario = pit.itinerario")
                ->andWhere('hi.status = 0')
                ;
        
        return $qb->getQuery()->getOneOrNullResult();
        
    }
    
}
